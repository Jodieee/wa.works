!function(w,$,_){"use strict";var c=/^.*(youtu\.be\/|youtube\.com\/v\/|youtube\.com\/embed\/|youtube\.com\/watch\?v=|youtube\.com\/watch\?.*\&v=)([^#\&\?]*).*/i;w.fn.backstretch=function(a,n){var s,h=arguments;return 0===w($).scrollTop()&&$.scrollTo(0,0),this.each(function(t){var e=w(this),i=e.data("backstretch");if(i){if("string"==typeof h[0]&&"function"==typeof i[h[0]]){var r=i[h[0]].apply(i,Array.prototype.slice.call(h,1));return r===i&&(r=_),void(r!==_&&((s=s||[])[t]=r))}n=w.extend(i.options,n),i.hasOwnProperty("destroy")&&i.destroy(!0)}if(!a||a&&0===a.length){var o=e.css("background-image");o&&"none"!==o?a=[{url:e.css("backgroundImage").replace(/url\(|\)|"|'/g,"")}]:w.error("No images were supplied for Backstretch, or element must have a CSS-defined background image.")}i=new y(this,a,n||{}),e.data("backstretch",i)}),s?1===s.length?s[0]:s:this},w.backstretch=function(t,e){return w("body").backstretch(t,e).data("backstretch")},w.expr[":"].backstretch=function(t){return w(t).data("backstretch")!==_},w.fn.backstretch.defaults={duration:5e3,transition:"fade",transitionDuration:0,animateFirst:!0,alignX:.5,alignY:.5,paused:!1,start:0,preload:2,preloadSize:1,resolutionRefreshRate:2500,resolutionChangeRatioThreshold:.1};var d,l,u,i,p,g,s={wrap:{left:0,top:0,overflow:"hidden",margin:0,padding:0,height:"100%",width:"100%",zIndex:-999999},itemWrapper:{position:"absolute",display:"none",margin:0,padding:0,border:"none",width:"100%",height:"100%",zIndex:-999999},item:{position:"absolute",margin:0,padding:0,border:"none",width:"100%",height:"100%",maxWidth:"none"}},T=(d=function(t){for(var e=1;e<t.length;e++){for(var i=t[e],r=e;t[r-1]&&parseInt(t[r-1].width,10)>parseInt(i.width,10);)t[r]=t[r-1],--r;t[r]=i}return t},l=function(t,e,i){for(var r,o,a=$.devicePixelRatio||1,n=C(),s=(S(),t<e?"portrait":e<t?"landscape":"square"),h=0,c=0;c<i.length&&("string"==typeof(o=i[c])&&(o=i[c]={url:o}),o.pixelRatio&&"auto"!==o.pixelRatio&&parseFloat(o.pixelRatio)!==a||o.deviceOrientation&&o.deviceOrientation!==n||o.windowOrientation&&o.windowOrientation!==n||o.orientation&&o.orientation!==s||(h=c,r=t,"auto"===o.pixelRatio&&(t*=a),!(o.width>=r)));c++);return i[Math.min(c,h)]},u=function(t,e){if("string"==typeof t)t=t.replace(/{{(width|height)}}/g,e);else if(t instanceof Array)for(var i=0;i<t.length;i++)t[i].src?t[i].src=u(t[i].src,e):t[i]=u(t[i],e);return t},function(t,e){for(var i=t.width(),r=t.height(),o=[],a=function(t,e){return"width"===e?i:"height"===e?r:t},n=0;n<e.length;n++)if(w.isArray(e[n])){e[n]=d(e[n]);var s=l(i,r,e[n]);o.push(s)}else{"string"==typeof e[n]&&(e[n]={url:e[n]});var h=w.extend({},e[n]);h.url=u(h.url,a),o.push(h)}return o}),m=function(t){return c.test(t.url)||t.isVideo},k=(i=[],p=function(t){for(var e=0;e<i.length;e++)if(i[e].src===t.src)return i[e];return i.push(t),t},g=function(t,e,i){"function"==typeof e&&e.call(t,i)},function t(e,i,r,o,a){if(void 0!==e){w.isArray(e)||(e=[e]),arguments.length<5&&"function"==typeof arguments[arguments.length-1]&&(a=arguments[arguments.length-1]),i="function"!=typeof i&&i?i:0,r="function"==typeof r||!r||r<0?e.length:Math.min(r,e.length),o="function"!=typeof o&&o?o:1,i>=e.length&&(r=i=0),o<0&&(o=r),o=Math.min(o,r);var n=e.slice(i+o,r-o);if(e=e.slice(i,o),r=e.length)for(var s,h=0,c=function(){++h===r&&(g(e,a,!n),t(n,0,0,o,a))},d=0;d<e.length;d++)m(e[d])||((s=new Image).src=e[d].url,(s=p(s)).complete?c():w(s).on("load error",c));else g(e,a,!0)}}),h=function(t){for(var e=[],i=0;i<t.length;i++)"string"==typeof t[i]?e.push({url:t[i]}):w.isArray(t[i])?e.push(h(t[i])):e.push(f(t[i]));return e},f=function(t,e){return(t.centeredX||t.centeredY)&&($.console&&$.console.log&&$.console.log("jquery.backstretch: `centeredX`/`centeredY` is deprecated, please use `alignX`/`alignY`"),t.centeredX&&(t.alignX=.5),t.centeredY&&(t.alignY=.5)),t.speed!==_&&($.console&&$.console.log&&$.console.log("jquery.backstretch: `speed` is deprecated, please use `transitionDuration`"),t.transitionDuration=t.speed,t.transition="fade"),t.resolutionChangeRatioTreshold!==_&&($.console.log("jquery.backstretch: `treshold` is a typo!"),t.resolutionChangeRatioThreshold=t.resolutionChangeRatioTreshold),t.fadeFirst!==_&&(t.animateFirst=t.fadeFirst),t.fade!==_&&(t.transitionDuration=t.fade,t.transition="fade"),t.scale&&(t.scale=x(t.scale)),r(t)},r=function(t,e){return"left"===t.alignX?t.alignX=0:"center"===t.alignX?t.alignX=.5:"right"===t.alignX?t.alignX=1:(t.alignX!==_||e)&&(t.alignX=parseFloat(t.alignX),isNaN(t.alignX)&&(t.alignX=.5)),"top"===t.alignY?t.alignY=0:"center"===t.alignY?t.alignY=.5:"bottom"===t.alignY?t.alignY=1:(t.alignX!==_||e)&&(t.alignY=parseFloat(t.alignY),isNaN(t.alignY)&&(t.alignY=.5)),t},e={cover:"cover",fit:"fit","fit-smaller":"fit-smaller",fill:"fill"};function x(t){return e.hasOwnProperty(t)?t:"cover"}var y=function(t,e,i){this.options=w.extend({},w.fn.backstretch.defaults,i||{}),this.firstShow=!0,f(this.options,!0),this.images=h(w.isArray(e)?e:[e]),this.options.paused&&(this.paused=!0),this.options.start>=this.images.length&&(this.options.start=this.images.length-1),this.options.start<0&&(this.options.start=0),this.isBody=t===document.body;var r=w($);this.$container=w(t),this.$root=this.isBody?z?r:w(document):this.$container,this.originalImages=this.images,this.images=T(this.options.alwaysTestWindowResolution?r:this.$root,this.originalImages),k(this.images,this.options.start||0,this.options.preload||1);var o=this.$container.children(".backstretch").first();if(this.$wrap=o.length?o:w('<div class="backstretch"></div>').css(this.options.bypassCss?{}:s.wrap).appendTo(this.$container),!this.options.bypassCss){if(!this.isBody){var a=this.$container.css("position"),n=this.$container.css("zIndex");this.$container.css({position:"static"===a?"relative":a,zIndex:"auto"===n?0:n}),this.$wrap.css({zIndex:-999998})}this.$wrap.css({position:this.isBody&&z?"fixed":"absolute"})}this.index=this.options.start,this.show(this.index),r.on("resize.backstretch",w.proxy(this.resize,this)).on("orientationchange.backstretch",w.proxy(function(){this.isBody&&0===$.pageYOffset&&($.scrollTo(0,1),this.resize())},this))};y.prototype={resize:function(){try{var t=this.options.alwaysTestWindowResolution?w($):this.$root,e=t.width(),i=t.height(),r=e/(this._lastResizeContainerWidth||0),o=i/(this._lastResizeContainerHeight||0),a=this.options.resolutionChangeRatioThreshold||0;if((e!==this._lastResizeContainerWidth||i!==this._lastResizeContainerHeight)&&(Math.abs(r-1)>=a||isNaN(r)||Math.abs(o-1)>=a||isNaN(o))&&(this._lastResizeContainerWidth=e,this._lastResizeContainerHeight=i,this.images=T(t,this.originalImages),this.options.preload&&k(this.images,(this.index+1)%this.images.length,this.options.preload),1===this.images.length&&this._currentImage.url!==this.images[0].url)){var n=this;clearTimeout(n._selectAnotherResolutionTimeout),n._selectAnotherResolutionTimeout=setTimeout(function(){n.show(0)},this.options.resolutionRefreshRate)}var s,h,c={left:0,top:0,right:"auto",bottom:"auto"},d=this.isBody?this.$root.width():this.$root.innerWidth(),l=this.isBody?$.innerHeight?$.innerHeight:this.$root.height():this.$root.innerHeight(),u=this.$itemWrapper.data("width"),p=this.$itemWrapper.data("height"),g=u/p||1,f=this._currentImage.alignX===_?this.options.alignX:this._currentImage.alignX,y=this._currentImage.alignY===_?this.options.alignY:this._currentImage.alignY,m=x(this._currentImage.scale||this.options.scale);if("fit"===m||"fit-smaller"===m){if(h=p,d<(s=u)||l<h||"fit-smaller"===m){var v=d/l;h=g<v?(s=Math.floor(l*g),l):v<g?(s=d,Math.floor(d/g)):(s=d,l)}}else h="fill"===m?(s=d,l):(s=Math.max(l*g,d),Math.max(s/g,l));c.top=-(h-l)*y,c.left=-(s-d)*f,c.width=s,c.height=h,this.options.bypassCss||this.$wrap.css({width:d,height:l}).find(">.backstretch-item").not(".deleteable").each(function(){w(this).find("img,video,iframe").css(c)});var b=w.Event("backstretch.resize",{relatedTarget:this.$container[0]});this.$container.trigger(b,this)}catch(t){}return this},show:function(d,l){if(!(Math.abs(d)>this.images.length-1)){var u=this,p=u.$wrap.find(">.backstretch-item").addClass("deleteable"),g=u.videoWrapper,f={relatedTarget:u.$container[0]};u.$container.trigger(w.Event("backstretch.before",f),[u,d]),this.index=d;var t=u.images[d];clearTimeout(u._cycleTimeout),delete u.videoWrapper;var y=m(t);return u.$item=y?(u.videoWrapper=new v(t),u.videoWrapper.$video.css("pointer-events","none")):w("<img />"),u.$itemWrapper=w('<div class="backstretch-item">').append(u.$item),this.options.bypassCss?u.$itemWrapper.css({display:"none"}):(u.$itemWrapper.css(s.itemWrapper),u.$item.css(s.item)),u.$item.bind(y?"canplay":"load",function(t){var e=w(this).parent(),i=e.data("options");l&&(i=w.extend({},i,l));var r=this.naturalWidth||this.videoWidth||this.width,o=this.naturalHeight||this.videoHeight||this.height;e.data("width",r).data("height",o);var a=function(t){return i[t]!==_?i[t]:u.options[t]},n=a("transition"),s=a("transitionEasing"),h=a("transitionDuration"),c=function(){g&&(g.stop(),g.destroy()),p.remove(),!u.paused&&1<u.images.length&&u.cycle(),u.options.bypassCss||u.isBody||u.$container.css("background-image","none"),w(["after","show"]).each(function(){u.$container.trigger(w.Event("backstretch."+this,f),[u,d])}),y&&u.videoWrapper.play()};u.firstShow&&!u.options.animateFirst||!h||!n?(e.show(),c()):function(t){var e=t.transition||"fade";"string"==typeof e&&-1<e.indexOf("|")&&(e=e.split("|")),e instanceof Array&&(e=e[Math.round(Math.random()*(e.length-1))]);var i=t.new,r=t.old?t.old:w([]);switch(e.toString().toLowerCase()){default:case"fade":i.fadeIn({duration:t.duration,complete:t.complete,easing:t.easing||_});break;case"fadeinout":case"fade_in_out":var o=function(){i.fadeIn({duration:t.duration/2,complete:t.complete,easing:t.easing||_})};r.length?r.fadeOut({duration:t.duration/2,complete:o,easing:t.easing||_}):o();break;case"pushleft":case"push_left":case"pushright":case"push_right":case"pushup":case"push_up":case"pushdown":case"push_down":case"coverleft":case"cover_left":case"coverright":case"cover_right":case"coverup":case"cover_up":case"coverdown":case"cover_down":var a=e.match(/^(cover|push)_?(.*)$/),n="left"===a[2]?"right":"right"===a[2]?"left":"down"===a[2]?"top":"up"===a[2]?"bottom":"right",s={display:""},h={};if(s[n]="-100%",h[n]=0,i.css(s).animate(h,{duration:t.duration,complete:function(){i.css(n,""),t.complete.apply(this,arguments)},easing:t.easing||_}),"push"===a[1]&&r.length){var c={};c[n]="100%",r.animate(c,{duration:t.duration,complete:function(){r.css("display","none")},easing:t.easing||_})}}}({new:e,old:p,transition:n,duration:h,easing:s,complete:c}),u.firstShow=!1,u.resize()}),u.$itemWrapper.appendTo(u.$wrap),u.$item.attr("alt",t.alt||""),u.$itemWrapper.data("options",t),y||u.$item.attr("src",t.url),u._currentImage=t,u}},current:function(){return this.index},next:function(){var t=Array.prototype.slice.call(arguments,0);return t.unshift(this.index<this.images.length-1?this.index+1:0),this.show.apply(this,t)},prev:function(){var t=Array.prototype.slice.call(arguments,0);return t.unshift(0===this.index?this.images.length-1:this.index-1),this.show.apply(this,t)},pause:function(){return this.paused=!0,this.videoWrapper&&this.videoWrapper.pause(),this},resume:function(){return this.paused=!1,this.videoWrapper&&this.videoWrapper.play(),this.cycle(),this},cycle:function(){if(1<this.images.length){clearTimeout(this._cycleTimeout);var t=this._currentImage&&this._currentImage.duration||this.options.duration,e=m(this._currentImage),i=function(){this.$item.off(".cycle"),this.paused||this.next()};if(e){if(!this._currentImage.loop){var r=0;this.$item.on("playing.cycle",function(){var t=w(this).data("player");clearTimeout(r),r=setTimeout(function(){t.pause(),t.$video.trigger("ended")},1e3*(t.getDuration()-t.getCurrentTime()))}).on("ended.cycle",function(){clearTimeout(r)})}this.$item.on("error.cycle initerror.cycle",w.proxy(i,this))}e&&!this._currentImage.duration?this.$item.on("ended.cycle",w.proxy(i,this)):this._cycleTimeout=setTimeout(w.proxy(i,this),t)}return this},destroy:function(t){w($).off("resize.backstretch orientationchange.backstretch"),this.videoWrapper&&this.videoWrapper.destroy(),clearTimeout(this._cycleTimeout),t||this.$wrap.remove(),this.$container.removeData("backstretch")}};var v=function(){this.init.apply(this,arguments)};v.prototype.init=function(t){var e,i=this,r=function(){i.$video=e,i.video=e[0]},o="video";if(t.url instanceof Array||!c.test(t.url)||(o="youtube"),"youtube"===(i.type=o)){v.loadYoutubeAPI(),i.ytId=t.url.match(c)[2];var a="https://www.youtube.com/embed/"+i.ytId+"?rel=0&autoplay=0&showinfo=0&controls=0&modestbranding=1&cc_load_policy=0&disablekb=1&iv_load_policy=3&loop=0&enablejsapi=1&origin="+encodeURIComponent($.location.origin);i.__ytStartMuted=!!t.mute||t.mute===_,e=w("<iframe />").attr({src_to_load:a}).css({border:0,margin:0,padding:0}).data("player",i),t.loop&&e.on("ended.loop",function(){i.__manuallyStopped||i.play()}),i.ytReady=!1,r(),$.YT?(i._initYoutube(),e.trigger("initsuccess")):w($).one("youtube_api_load",function(){i._initYoutube(),e.trigger("initsuccess")})}else{e=w("<video>").prop("autoplay",!1).prop("controls",!1).prop("loop",!!t.loop).prop("muted",!!t.mute||t.mute===_).prop("preload","auto").prop("poster",t.poster||"");for(var n=t.url instanceof Array?t.url:[t.url],s=0;s<n.length;s++){var h=n[s];"string"==typeof h&&(h={src:h}),w("<source>").attr("src",h.src).attr("type",h.type||null).appendTo(e)}e[0].canPlayType&&n.length?e.trigger("initsuccess"):e.trigger("initerror"),r()}},v.prototype._initYoutube=function(){var e=this,i=$.YT;e.$video.attr("src",e.$video.attr("src_to_load")).removeAttr("src_to_load");var t=!!e.$video[0].parentNode;if(!t){var r=w("<div>").css("display","none !important").appendTo(document.body);e.$video.appendTo(r)}var o=new i.Player(e.video,{events:{onReady:function(){e.__ytStartMuted&&o.mute(),t||(e.$video[0].parentNode===r[0]&&e.$video.detach(),r.remove()),e.ytReady=!0,e._updateYoutubeSize(),e.$video.trigger("canplay")},onStateChange:function(t){switch(t.data){case i.PlayerState.PLAYING:e.$video.trigger("playing");break;case i.PlayerState.ENDED:e.$video.trigger("ended");break;case i.PlayerState.PAUSED:e.$video.trigger("pause");break;case i.PlayerState.BUFFERING:e.$video.trigger("waiting");break;case i.PlayerState.CUED:e.$video.trigger("canplay")}},onPlaybackQualityChange:function(){e._updateYoutubeSize(),e.$video.trigger("resize")},onError:function(t){e.hasError=!0,e.$video.trigger({type:"error",error:t})}}});return e.ytPlayer=o,e},v.prototype._updateYoutubeSize=function(){var t=this;switch(t.ytPlayer.getPlaybackQuality()||"medium"){case"small":t.video.videoWidth=426,t.video.videoHeight=240;break;case"medium":t.video.videoWidth=640,t.video.videoHeight=360;break;default:case"large":t.video.videoWidth=854,t.video.videoHeight=480;break;case"hd720":t.video.videoWidth=1280,t.video.videoHeight=720;break;case"hd1080":t.video.videoWidth=1920,t.video.videoHeight=1080;break;case"highres":t.video.videoWidth=2560,t.video.videoHeight=1440}return t},v.prototype.play=function(){var t=this;return t.__manuallyStopped=!1,"youtube"===t.type?t.ytReady&&(t.$video.trigger("play"),t.ytPlayer.playVideo()):t.video.play(),t},v.prototype.pause=function(){var t=this;return t.__manuallyStopped=!1,"youtube"===t.type?t.ytReady&&t.ytPlayer.pauseVideo():t.video.pause(),t},v.prototype.stop=function(){var t=this;return t.__manuallyStopped=!0,"youtube"===t.type?t.ytReady&&(t.ytPlayer.pauseVideo(),t.ytPlayer.seekTo(0)):(t.video.pause(),t.video.currentTime=0),t},v.prototype.destroy=function(){return this.ytPlayer&&this.ytPlayer.destroy(),this.$video.remove(),this},v.prototype.getCurrentTime=function(t){return"youtube"!==this.type?this.video.currentTime:this.ytReady?this.ytPlayer.getCurrentTime():0},v.prototype.setCurrentTime=function(t){var e=this;return"youtube"===e.type?e.ytReady&&e.ytPlayer.seekTo(t,!0):e.video.currentTime=t,e},v.prototype.getDuration=function(){return"youtube"!==this.type?this.video.duration:this.ytReady?this.ytPlayer.getDuration():0},v.loadYoutubeAPI=function(){if(!$.YT){w("script[src*=www\\.youtube\\.com\\/iframe_api]").length||w('<script type="text/javascript" src="https://www.youtube.com/iframe_api">').appendTo("body");var t=setInterval(function(){$.YT&&$.YT.loaded&&(w($).trigger("youtube_api_load"),clearTimeout(t))},50)}};var t,o,a,n,b,W,R,I,Y,P,C=function(){if("matchMedia"in $){if($.matchMedia("(orientation: portrait)").matches)return"portrait";if($.matchMedia("(orientation: landscape)").matches)return"landscape"}return screen.height>screen.width?"portrait":"landscape"},S=function(){return $.innerHeight>$.innerWidth?"portrait":$.innerWidth>$.innerHeight?"landscape":"square"},z=(t=navigator.userAgent,o=navigator.platform,a=t.match(/AppleWebKit\/([0-9]+)/),n=!!a&&a[1],b=t.match(/Fennec\/([0-9]+)/),W=!!b&&b[1],R=t.match(/Opera Mobi\/([0-9]+)/),I=!!R&&R[1],Y=t.match(/MSIE ([0-9]+)/),P=!!Y&&Y[1],!((-1<o.indexOf("iPhone")||-1<o.indexOf("iPad")||-1<o.indexOf("iPod"))&&n&&n<534||$.operamini&&"[object OperaMini]"==={}.toString.call($.operamini)||R&&I<7458||-1<t.indexOf("Android")&&n&&n<533||W&&W<6||"palmGetResource"in $&&n&&n<534||-1<t.indexOf("MeeGo")&&-1<t.indexOf("NokiaBrowser/8.5.0")||P&&P<=6))}(jQuery,window),$(document).ready(function(){$("nav a").on("click",function(t){if(""!==this.hash){t.preventDefault();var e=this.hash;$("html, body").animate({scrollTop:$(e).offset().top},1e3,function(){window.location.hash=e})}})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
